<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7bef152c-5c82-4c65-b708-328ba44755df" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/src/dao/RegionDao.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/domain/Region.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/domain/RegionChild.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/domain/RegionParent.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/service/RegionService.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/TestClass.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/controller/MainController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/MainController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/dao/UserDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/dao/UserDao.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/domain/DeliveryMan.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/domain/DeliveryMan.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/service/UserService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/service/UserService.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Enum" />
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="UPDATE_TYPE" value="REBASE" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="jar:///Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home/lib/src.zip!/java.base/java/lang/IllegalArgumentException.java" root0="SKIP_INSPECTION" />
    <setting file="jar:///Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home/lib/src.zip!/java.base/java/lang/RuntimeException.java" root0="SKIP_INSPECTION" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2k3GgbBTPJ4BUSmJ8QEvm3ZPk2S" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.LoginController.executor": "Run",
    "Application.Main.executor": "Run",
    "Application.MainController.executor": "Run",
    "Downloaded.Files.Path.Enabled": "false",
    "JUnit.TestClass.aa.executor": "Run",
    "JUnit.UserServiceTest.businessManJoin.executor": "Run",
    "Repository.Attach.Annotations": "false",
    "Repository.Attach.JavaDocs": "false",
    "Repository.Attach.Sources": "false",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
    "create.test.in.the.same.root": "true",
    "git-widget-placeholder": "main",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "/Users/lee/Desktop/kyungmin-wms/src",
    "project.structure.last.edited": "Libraries",
    "project.structure.proportion": "0.15",
    "project.structure.side.proportion": "0.2",
    "settings.editor.selected.configurable": "reference.projectsettings.compiler.annotationProcessors"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="webapp.user.exception" />
      <recent name="webapp.user" />
      <recent name="" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src" />
      <recent name="$PROJECT_DIR$/lib" />
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/.idea" />
      <recent name="$PROJECT_DIR$/src/webapp/user" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/webapp/WEB-INF/lib" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="service" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="dto" />
    </key>
  </component>
  <component name="RunManager" selected="JUnit.TestClass.aa">
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="user.Main" />
      <module name="kyungmin-wms" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="domain.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="MainController" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="controller.MainController" />
      <module name="kyungmin-wms" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="domain.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="TestClass.aa" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="kyungmin-wms" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="test.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="test" />
      <option name="MAIN_CLASS_NAME" value="test.TestClass" />
      <option name="METHOD_NAME" value="aa" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="UserServiceTest.businessManJoin" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="kyungmin-wms" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="service.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="service" />
      <option name="MAIN_CLASS_NAME" value="service.UserServiceTest" />
      <option name="METHOD_NAME" value="businessManJoin" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.TestClass.aa" />
        <item itemvalue="JUnit.UserServiceTest.businessManJoin" />
        <item itemvalue="Application.MainController" />
        <item itemvalue="Application.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7bef152c-5c82-4c65-b708-328ba44755df" name="Changes" comment="" />
      <created>1722504958810</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1722504958810</updated>
    </task>
    <task id="LOCAL-00001" summary="wms 프로젝트 생성 및 도메인 정의">
      <option name="closed" value="true" />
      <created>1722782766653</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1722782766653</updated>
    </task>
    <task id="LOCAL-00002" summary="리포지토리 , 서비스 , 컨트롤러 틀 구현">
      <option name="closed" value="true" />
      <created>1722823234592</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1722823234592</updated>
    </task>
    <task id="LOCAL-00003" summary="도메인 완성(MEMBER : 창고면적 추가 , DELIVERY_MAN : 차량번호 추가)">
      <option name="closed" value="true" />
      <created>1722845630472</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1722845630472</updated>
    </task>
    <task id="LOCAL-00004" summary="Guest 추가">
      <option name="closed" value="true" />
      <created>1722846873664</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1722846873664</updated>
    </task>
    <task id="LOCAL-00005" summary="1. 도메인 명 Member =&gt; BusinessMan 변경 &#10;&#10;2. 이름 추가&#10;DeliveryManDto : carNum(차량번호) &#10;BusinessManDto warehouseArea(창고면적) 추가">
      <option name="closed" value="true" />
      <created>1722933681275</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1722933681275</updated>
    </task>
    <task id="LOCAL-00006" summary="1. 도메인 명 Member =&gt; BusinessMan 변경 &#10;&#10;2. 이름 추가&#10;DeliveryManDto : carNum(차량번호) &#10;BusinessManDto warehouseArea(창고면적) 추가">
      <option name="closed" value="true" />
      <created>1722933730654</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1722933730654</updated>
    </task>
    <task id="LOCAL-00007" summary="회원가입 서비스 로직 구현">
      <option name="closed" value="true" />
      <created>1723008817641</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1723008817641</updated>
    </task>
    <task id="LOCAL-00008" summary="회원가입 및 로그인 설계 중 동시성 고민 전단계까지 구현">
      <option name="closed" value="true" />
      <created>1723200172668</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1723200172668</updated>
    </task>
    <task id="LOCAL-00009" summary="히카리 cp 구현">
      <option name="closed" value="true" />
      <created>1723286862034</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1723286862034</updated>
    </task>
    <task id="LOCAL-00010" summary="로그인 , 회원관리 완성">
      <option name="closed" value="true" />
      <created>1723453707892</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1723453707902</updated>
    </task>
    <task id="LOCAL-00011" summary="로그인 인증 로직 변환(User =&gt; id)">
      <option name="closed" value="true" />
      <created>1723456608693</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1723456608693</updated>
    </task>
    <task id="LOCAL-00012" summary="로그인 인증 로직 변환(User =&gt; id)">
      <option name="closed" value="true" />
      <created>1723456655388</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1723456655388</updated>
    </task>
    <task id="LOCAL-00013" summary="로그인 인증 로직 변환(User =&gt; id)">
      <option name="closed" value="true" />
      <created>1723473539034</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1723473539034</updated>
    </task>
    <task id="LOCAL-00014" summary="1. repository =&gt; dao 변경&#10;2. hikaricp 5.1.0 =&gt; 5.0.1변경">
      <option name="closed" value="true" />
      <created>1723520609763</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1723520609763</updated>
    </task>
    <task id="LOCAL-00015" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 히카리 CP 연동 성공&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723539980661</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1723539980661</updated>
    </task>
    <task id="LOCAL-00016" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;feat: JUnit 5 라이브러리 추가 &#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723544088954</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1723544088954</updated>
    </task>
    <task id="LOCAL-00017" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 회원 등록 , 수정 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723725018479</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1723725018479</updated>
    </task>
    <task id="LOCAL-00018" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: wms 프로젝트 로그인 찾기까지 커밋&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723885938627</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1723885938627</updated>
    </task>
    <task id="LOCAL-00019" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 아이디 찾기 기능 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;UserService에 아이디 찾기 기능 추가&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723914470113</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1723914470113</updated>
    </task>
    <task id="LOCAL-00020" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 저장 시 비밀번호 문답 데이터 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723915609236</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1723915609236</updated>
    </task>
    <task id="LOCAL-00021" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 8/18일 오전 2:39분 서비스 비밀번호 재설정 로직 작성 중 커밋 &#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723916368711</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1723916368711</updated>
    </task>
    <task id="LOCAL-00022" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 비밀번호 재설정 기능 추가&#10;refactor: UserService에서 SQLException을 RuntimeException으로 변환해서 throw 리팩토링&#10;refactor: 사용자가 제어할 수 있는 사용자 입력 오류로 인한 에러는 UserService에서 Controller로 전부 throw하게 함으로써 Controller에서 try-catch 유도&#10;&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723975872089</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1723975872089</updated>
    </task>
    <task id="LOCAL-00023" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: 도메인의 id있는 생성자 , id 없는 생성자 생성 &#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723978099581</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1723978099581</updated>
    </task>
    <task id="LOCAL-00024" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;fix: findAll() 로직 서브 테이블 sql 작성&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723978910514</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1723978910514</updated>
    </task>
    <task id="LOCAL-00025" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: findById 리팩토링&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;불필요한 필드 선언 제거&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723979973558</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1723979973558</updated>
    </task>
    <task id="LOCAL-00026" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: Dao 예외 처리 전부 throw e =&gt; throw new RuntimeException(e)로 변경&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723980895677</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1723980895677</updated>
    </task>
    <task id="LOCAL-00027" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: 아이디 찾기 시 예외 로직 print문에서 IllegalArgumentException throw하는 로직으로 변경 &#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723983269754</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1723983269754</updated>
    </task>
    <task id="LOCAL-00028" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 회원 서비스 , 회원 dao 임시 구현 완성&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1723988461712</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1723988461712</updated>
    </task>
    <task id="LOCAL-00029" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: DeliveryMan 도메인에 Region 연관관계 필드 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1724032682220</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1724032682220</updated>
    </task>
    <task id="LOCAL-00030" summary="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;fix: 서브 테이블 SQL pstmt , rs 리소스 안 닫은 버그 수정&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################">
      <option name="closed" value="true" />
      <created>1724033699713</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1724033699713</updated>
    </task>
    <option name="localTasksCounter" value="31" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Guest 추가" />
    <MESSAGE value="1. 도메인 명 Member =&gt; BusinessMan 변경 &#10;&#10;2. 이름 추가&#10;DeliveryManDto : carNum(차량번호) &#10;BusinessManDto warehouseArea(창고면적) 추가" />
    <MESSAGE value="회원가입 서비스 로직 구현" />
    <MESSAGE value="회원가입 및 로그인 설계 중 동시성 고민 전단계까지 구현" />
    <MESSAGE value="히카리 cp 구현" />
    <MESSAGE value="로그인 , 회원관리 완성" />
    <MESSAGE value="로그인 인증 로직 변환(User =&gt; id)" />
    <MESSAGE value="1. repository =&gt; dao 변경&#10;2. hikaricp 5.1.0 =&gt; 5.0.1변경" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 히카리 CP 연동 성공&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;feat: JUnit 5 라이브러리 추가 &#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 회원 등록 , 수정 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: wms 프로젝트 로그인 찾기까지 커밋&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 아이디 찾기 기능 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;UserService에 아이디 찾기 기능 추가&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 저장 시 비밀번호 문답 데이터 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 8/18일 오전 2:39분 서비스 비밀번호 재설정 로직 작성 중 커밋 &#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 비밀번호 재설정 기능 추가&#10;refactor: UserService에서 SQLException을 RuntimeException으로 변환해서 throw 리팩토링&#10;refactor: 사용자가 제어할 수 있는 사용자 입력 오류로 인한 에러는 UserService에서 Controller로 전부 throw하게 함으로써 Controller에서 try-catch 유도&#10;&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: 도메인의 id있는 생성자 , id 없는 생성자 생성 &#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;fix: findAll() 로직 서브 테이블 sql 작성&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: findById 리팩토링&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;불필요한 필드 선언 제거&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: Dao 예외 처리 전부 throw e =&gt; throw new RuntimeException(e)로 변경&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;refactor: 아이디 찾기 시 예외 로직 print문에서 IllegalArgumentException throw하는 로직으로 변경 &#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: 회원 서비스 , 회원 dao 임시 구현 완성&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;feat: DeliveryMan 도메인에 Region 연관관계 필드 추가&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <MESSAGE value="################ COMMIT START&#13;&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#13;&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#13;&#10;&#13;&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#13;&#10;&#13;&#10;################&#13;&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#13;&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#13;&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#13;&#10;&#13;&#10;################ COMMIT END&#13;&#10;# --- COMMIT TYPE ---&#13;&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#13;&#10;#  feat             : 새로운 기능&#13;&#10;#  fix              : 버그 수정&#13;&#10;#  refactor         : 코드 리펙토링&#13;&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#13;&#10;#  design           : CSS/UI 변경 내용&#13;&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#13;&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#13;&#10;#  update           : 전반적인 수정사항&#13;&#10;#  remove           : 삭제&#13;&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#13;&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#13;&#10;#  add dependency   : dependency 추가&#13;&#10;#  typo fix         : 오탈자 수정&#13;&#10;################" />
    <MESSAGE value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;fix: 서브 테이블 SQL pstmt , rs 리소스 안 닫은 버그 수정&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
    <option name="LAST_COMMIT_MESSAGE" value="################ COMMIT START&#10;# &lt;타입&gt;: &lt;제목&gt; 의 형식으로 제목을 아래 공백줄에 작성 -- ex. feat: 로그인 기능 추가&#10;# 제목은 50자 이내, 변경사항 명확히 작성, 끝에 마침표 금지&#10;fix: 서브 테이블 SQL pstmt , rs 리소스 안 닫은 버그 수정&#10;# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)&#10;&#10;################&#10;# 본문(구체적인 내용)을 아랫줄에 작성&#10;# &quot;어떻게&quot; 보다 &quot;무엇을&quot;, &quot;왜&quot; 를 설명&#10;# 여러 줄의 메시지를 작성할 땐 &quot;-&quot;로 구분 (한 줄은 72자 이내)&#10;&#10;################ COMMIT END&#10;# --- COMMIT TYPE ---&#10;#  chore            : 프로젝트 초기 구성등 기타사항.&#10;#  feat             : 새로운 기능&#10;#  fix              : 버그 수정&#10;#  refactor         : 코드 리펙토링&#10;#  style            : 스타일 (코드 포맷팅, 세미콜론 등 비즈니스 로직에 영향 없는 변경 사항)&#10;#  design           : CSS/UI 변경 내용&#10;#  docs             : 문서 (문서 추가, 수정, 삭제)&#10;#  test             : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음)&#10;#  update           : 전반적인 수정사항&#10;#  remove           : 삭제&#10;#  in progress      : 아직 완성하지는 못했지만 진행중인 부분을 커밋해야할 경우&#10;#  HOTFIX           : 급하게 치명적인 버그를 고쳐야 하는 경우&#10;#  add dependency   : dependency 추가&#10;#  typo fix         : 오탈자 수정&#10;################" />
  </component>
</project>